--Connection setup
The ConnectionAdapter object is currently started in the onCreate of the main activity.

--Querying a table
First, need to get the connection's mobile service client with

MobileServiceClient mClient = ConnectionAdapter.getInstance().getClient();

Each table also requires a class with variables identical to the table column names (I've already made these) or the correct data type. 
Then, create a table object with

MobileServiceTable<type> typeTable = mClient.getTable("databaseTableName", type.class);

where type is the name of the java class of the table entries, and databaseTableName is the exact name of the table name in the database, in quotations.
Example:

MobileServiceTable<User> userTable = mClient.getTable("Users", User.class);

Then, to pull information into the table, use

List<type> results = typeTable // generally an ArrayList
	//filters
	.execute() // runs the query in the database
	.get(); // gets results

type is the class of the results like earlier, typeTable is the table object created earlier
Filters include:
.select() // used for specifying specific columns of the table, e.g. .select("FirstName", "LastName")
.where() // used for filtering before specifying parameters
.field() //specify the column, e.g. .field("FirstName")
.eq() // equals, e.g. .field("ID").eq(1)
.orderBy() // specifies sorting, e.g. .orderBy("ID", QueryOrder.Ascending)

Full example:
List<User> results = userTable.select("FirstName").where().field("ID").eq(5);
returns the first name of the user with ID 5

--Inserting data into the database
Create an instance of the table data type (e.g. a new User), and set it's properties. Don't set the id of anything, the Azure API handles that.
Example:
User test = new User();
test.setFirstName("...")
etc

Then upload it with the insert method
Example
User uploaded = userTable.insert(test).get(); //returns the full entry into the database, including autogenerated things like ID, date, etc.

IMPORTANT: when updating or deleting data, get the full record from the database and use it to update/delete.

--Updating data
Similar to insert, only get the result class from the query, modify its properties, and use the upload method.
Example:
userTable.update(item).get();

--Deleting data
If you have the row saved as an object, use the delete method
Example: userTable.delete(test); // doesn't return anything
